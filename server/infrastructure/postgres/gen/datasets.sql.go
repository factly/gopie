// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: datasets.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDataset = `-- name: CreateDataset :one
insert into datasets (
    name,
    description,
    format,
    row_count,
    size,
    file_path,
    columns,
    alias,
    created_by,
    updated_by,
    org_id
) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
returning id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns, org_id
`

type CreateDatasetParams struct {
	Name        string
	Description pgtype.Text
	Format      string
	RowCount    pgtype.Int4
	Size        pgtype.Int8
	FilePath    string
	Columns     []byte
	Alias       pgtype.Text
	CreatedBy   pgtype.Text
	UpdatedBy   pgtype.Text
	OrgID       pgtype.Text
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, createDataset,
		arg.Name,
		arg.Description,
		arg.Format,
		arg.RowCount,
		arg.Size,
		arg.FilePath,
		arg.Columns,
		arg.Alias,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.OrgID,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
		&i.OrgID,
	)
	return i, err
}

const deleteDataset = `-- name: DeleteDataset :exec
delete from datasets where id = $1 and org_id = $2
`

type DeleteDatasetParams struct {
	ID    string
	OrgID pgtype.Text
}

func (q *Queries) DeleteDataset(ctx context.Context, arg DeleteDatasetParams) error {
	_, err := q.db.Exec(ctx, deleteDataset, arg.ID, arg.OrgID)
	return err
}

const getDataset = `-- name: GetDataset :one
select id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns, org_id from datasets where id = $1 and org_id = $2
`

type GetDatasetParams struct {
	ID    string
	OrgID pgtype.Text
}

func (q *Queries) GetDataset(ctx context.Context, arg GetDatasetParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, getDataset, arg.ID, arg.OrgID)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
		&i.OrgID,
	)
	return i, err
}

const getDatasetByName = `-- name: GetDatasetByName :one
select id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns, org_id from datasets where name = $1 and org_id = $2
`

type GetDatasetByNameParams struct {
	Name  string
	OrgID pgtype.Text
}

func (q *Queries) GetDatasetByName(ctx context.Context, arg GetDatasetByNameParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, getDatasetByName, arg.Name, arg.OrgID)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
		&i.OrgID,
	)
	return i, err
}

const searchDatasets = `-- name: SearchDatasets :many
select id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns, org_id from datasets
where 
    org_id = $1 and
    (name ilike concat('%', $2, '%') or
    description ilike concat('%', $2, '%') or
    alias ilike concat('%', $2, '%'))
order by 
    case 
        when alias ilike concat($2, '%') then 1
        when name ilike concat($2, '%') then 2
        when name ilike concat('%', $2, '%') then 3
        else 4
    end,
    created_at desc
limit $3 offset $4
`

type SearchDatasetsParams struct {
	OrgID  pgtype.Text
	Concat interface{}
	Limit  int32
	Offset int32
}

func (q *Queries) SearchDatasets(ctx context.Context, arg SearchDatasetsParams) ([]Dataset, error) {
	rows, err := q.db.Query(ctx, searchDatasets,
		arg.OrgID,
		arg.Concat,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Format,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RowCount,
			&i.Alias,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Size,
			&i.FilePath,
			&i.Columns,
			&i.OrgID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataset = `-- name: UpdateDataset :one
update datasets
set 
    description = coalesce($1, description),
    format = coalesce($2, format),
    row_count = coalesce($3, row_count),
    size = coalesce($4, size),
    file_path = coalesce($5, file_path),
    columns = coalesce($6, columns),
    alias = coalesce($7, alias),
    updated_by = coalesce($8, updated_by)
where id = $9 and org_id = $10
returning id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns, org_id
`

type UpdateDatasetParams struct {
	Description pgtype.Text
	Format      string
	RowCount    pgtype.Int4
	Size        pgtype.Int8
	FilePath    string
	Columns     []byte
	Alias       pgtype.Text
	UpdatedBy   pgtype.Text
	ID          string
	OrgID       pgtype.Text
}

func (q *Queries) UpdateDataset(ctx context.Context, arg UpdateDatasetParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, updateDataset,
		arg.Description,
		arg.Format,
		arg.RowCount,
		arg.Size,
		arg.FilePath,
		arg.Columns,
		arg.Alias,
		arg.UpdatedBy,
		arg.ID,
		arg.OrgID,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
		&i.OrgID,
	)
	return i, err
}
