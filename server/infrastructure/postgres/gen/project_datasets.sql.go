// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_datasets.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDatasetToProject = `-- name: AddDatasetToProject :exec
insert into project_datasets (project_id, dataset_id)
values ($1, $2)
on conflict do nothing
`

type AddDatasetToProjectParams struct {
	ProjectID string
	DatasetID string
}

func (q *Queries) AddDatasetToProject(ctx context.Context, arg AddDatasetToProjectParams) error {
	_, err := q.db.Exec(ctx, addDatasetToProject, arg.ProjectID, arg.DatasetID)
	return err
}

const batchAddDatasetsToProject = `-- name: BatchAddDatasetsToProject :exec
insert into project_datasets (project_id, dataset_id)
select $1, unnest($2::uuid[])
on conflict do nothing
`

type BatchAddDatasetsToProjectParams struct {
	ProjectID string
	Column2   []pgtype.UUID
}

// Batch Operations
func (q *Queries) BatchAddDatasetsToProject(ctx context.Context, arg BatchAddDatasetsToProjectParams) error {
	_, err := q.db.Exec(ctx, batchAddDatasetsToProject, arg.ProjectID, arg.Column2)
	return err
}

const batchRemoveDatasetsFromProject = `-- name: BatchRemoveDatasetsFromProject :exec
delete from project_datasets
where project_id = $1 and dataset_id = any($2::uuid[])
`

type BatchRemoveDatasetsFromProjectParams struct {
	ProjectID string
	Column2   []pgtype.UUID
}

func (q *Queries) BatchRemoveDatasetsFromProject(ctx context.Context, arg BatchRemoveDatasetsFromProjectParams) error {
	_, err := q.db.Exec(ctx, batchRemoveDatasetsFromProject, arg.ProjectID, arg.Column2)
	return err
}

const getDatasetProjectsCount = `-- name: GetDatasetProjectsCount :one
select count(*) 
from project_datasets
where dataset_id = $1
`

func (q *Queries) GetDatasetProjectsCount(ctx context.Context, datasetID string) (int64, error) {
	row := q.db.QueryRow(ctx, getDatasetProjectsCount, datasetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProjectDatasetsCount = `-- name: GetProjectDatasetsCount :one
select count(*) 
from project_datasets
where project_id = $1
`

func (q *Queries) GetProjectDatasetsCount(ctx context.Context, projectID string) (int64, error) {
	row := q.db.QueryRow(ctx, getProjectDatasetsCount, projectID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listAllDatasetsFromProject = `-- name: ListAllDatasetsFromProject :many
select d.id, d.name, d.description, d.created_at, d.updated_at, d.row_count, d.alias, d.created_by, d.updated_by, d.size, d.file_path, d.columns, d.org_id from datasets d join project_datasets pd on d.id = pd.dataset_id where pd.project_id = $1
`

func (q *Queries) ListAllDatasetsFromProject(ctx context.Context, projectID string) ([]Dataset, error) {
	rows, err := q.db.Query(ctx, listAllDatasetsFromProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RowCount,
			&i.Alias,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Size,
			&i.FilePath,
			&i.Columns,
			&i.OrgID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectDatasets = `-- name: ListProjectDatasets :many
select 
    d.id, d.name, d.description, d.created_at, d.updated_at, d.row_count, d.alias, d.created_by, d.updated_by, d.size, d.file_path, d.columns, d.org_id,
    pd.created_at as added_at
from datasets d
join project_datasets pd on d.id = pd.dataset_id
where pd.project_id = $1
order by pd.created_at desc
limit $2 offset $3
`

type ListProjectDatasetsParams struct {
	ProjectID string
	Limit     int32
	Offset    int32
}

type ListProjectDatasetsRow struct {
	ID          string
	Name        string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	RowCount    pgtype.Int4
	Alias       pgtype.Text
	CreatedBy   pgtype.Text
	UpdatedBy   pgtype.Text
	Size        pgtype.Int8
	FilePath    string
	Columns     []byte
	OrgID       pgtype.Text
	AddedAt     pgtype.Timestamptz
}

func (q *Queries) ListProjectDatasets(ctx context.Context, arg ListProjectDatasetsParams) ([]ListProjectDatasetsRow, error) {
	rows, err := q.db.Query(ctx, listProjectDatasets, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProjectDatasetsRow
	for rows.Next() {
		var i ListProjectDatasetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RowCount,
			&i.Alias,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Size,
			&i.FilePath,
			&i.Columns,
			&i.OrgID,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDatasetFromProject = `-- name: RemoveDatasetFromProject :exec
delete from project_datasets
where project_id = $1 and dataset_id = $2
`

type RemoveDatasetFromProjectParams struct {
	ProjectID string
	DatasetID string
}

func (q *Queries) RemoveDatasetFromProject(ctx context.Context, arg RemoveDatasetFromProjectParams) error {
	_, err := q.db.Exec(ctx, removeDatasetFromProject, arg.ProjectID, arg.DatasetID)
	return err
}
