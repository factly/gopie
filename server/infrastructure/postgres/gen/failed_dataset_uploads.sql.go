// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: failed_dataset_uploads.sql

package gen

import (
	"context"
)

const createFailedDatasetUpload = `-- name: CreateFailedDatasetUpload :one
insert into failed_dataset_uploads (
    dataset_id,
    error
) values (
    $1, $2
) returning id, dataset_id, error, created_at
`

type CreateFailedDatasetUploadParams struct {
	DatasetID string
	Error     string
}

func (q *Queries) CreateFailedDatasetUpload(ctx context.Context, arg CreateFailedDatasetUploadParams) (FailedDatasetUpload, error) {
	row := q.db.QueryRow(ctx, createFailedDatasetUpload, arg.DatasetID, arg.Error)
	var i FailedDatasetUpload
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.Error,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFailedDatasetUpload = `-- name: DeleteFailedDatasetUpload :exec
delete from failed_dataset_uploads
where dataset_id = $1
`

func (q *Queries) DeleteFailedDatasetUpload(ctx context.Context, datasetID string) error {
	_, err := q.db.Exec(ctx, deleteFailedDatasetUpload, datasetID)
	return err
}

const getFailedDatasetUploadsCount = `-- name: GetFailedDatasetUploadsCount :one
select count(*) from failed_dataset_uploads
`

func (q *Queries) GetFailedDatasetUploadsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getFailedDatasetUploadsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listFailedDatasetUploads = `-- name: ListFailedDatasetUploads :many
select id, dataset_id, error, created_at from failed_dataset_uploads
order by created_at desc
`

func (q *Queries) ListFailedDatasetUploads(ctx context.Context) ([]FailedDatasetUpload, error) {
	rows, err := q.db.Query(ctx, listFailedDatasetUploads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FailedDatasetUpload
	for rows.Next() {
		var i FailedDatasetUpload
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.Error,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
