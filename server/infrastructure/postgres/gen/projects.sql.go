// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: projects.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
insert into projects (
    name,
    description,
    created_by,
    updated_by,
    org_id
) values ($1, $2, $3, $4, $5)
returning id, name, org_id, description, created_at, updated_at, created_by, updated_by
`

type CreateProjectParams struct {
	Name        string
	Description pgtype.Text
	CreatedBy   pgtype.Text
	UpdatedBy   pgtype.Text
	OrgID       pgtype.Text
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.Name,
		arg.Description,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.OrgID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
delete from projects where id = $1 and org_id = $2
`

type DeleteProjectParams struct {
	ID    string
	OrgID pgtype.Text
}

func (q *Queries) DeleteProject(ctx context.Context, arg DeleteProjectParams) error {
	_, err := q.db.Exec(ctx, deleteProject, arg.ID, arg.OrgID)
	return err
}

const getProject = `-- name: GetProject :one
select 
    p.id, p.name, p.org_id, p.description, p.created_at, p.updated_at, p.created_by, p.updated_by,
    array_remove(array_agg(pd.dataset_id), null) as dataset_ids,
    count(pd.dataset_id) as dataset_count
from projects p
left join project_datasets pd on p.id = pd.project_id
where p.id = $1 and p.org_id = $2
group by p.id
`

type GetProjectParams struct {
	ID    string
	OrgID pgtype.Text
}

type GetProjectRow struct {
	ID           string
	Name         string
	OrgID        pgtype.Text
	Description  pgtype.Text
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	CreatedBy    pgtype.Text
	UpdatedBy    pgtype.Text
	DatasetIds   interface{}
	DatasetCount int64
}

func (q *Queries) GetProject(ctx context.Context, arg GetProjectParams) (GetProjectRow, error) {
	row := q.db.QueryRow(ctx, getProject, arg.ID, arg.OrgID)
	var i GetProjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DatasetIds,
		&i.DatasetCount,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
select id, name, org_id, description, created_at, updated_at, created_by, updated_by from projects where id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getProjectsCount = `-- name: GetProjectsCount :one
select count(*) from projects where org_id = $1
`

func (q *Queries) GetProjectsCount(ctx context.Context, orgID pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, getProjectsCount, orgID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listAllProjects = `-- name: ListAllProjects :many
select id, name, org_id, description, created_at, updated_at, created_by, updated_by from projects
`

func (q *Queries) ListAllProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrgID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProjects = `-- name: SearchProjects :many
SELECT 
    p.id, p.name, p.org_id, p.description, p.created_at, p.updated_at, p.created_by, p.updated_by,
    count(pd.dataset_id) as dataset_count
FROM projects p
LEFT JOIN project_datasets pd ON p.id = pd.project_id
WHERE 
    p.org_id = $1 AND
    (p.name ILIKE concat('%', $2::text, '%') OR
    p.description ILIKE concat('%', $2::text, '%'))
GROUP BY p.id
ORDER BY 
    CASE 
        WHEN p.name ILIKE concat($2::text, '%') THEN 1
        WHEN p.name ILIKE concat('%', $2::text, '%') THEN 2
        ELSE 3
    END,
    p.created_at DESC
LIMIT $3 OFFSET $4
`

type SearchProjectsParams struct {
	OrgID   pgtype.Text
	Column2 string
	Limit   int32
	Offset  int32
}

type SearchProjectsRow struct {
	ID           string
	Name         string
	OrgID        pgtype.Text
	Description  pgtype.Text
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	CreatedBy    pgtype.Text
	UpdatedBy    pgtype.Text
	DatasetCount int64
}

func (q *Queries) SearchProjects(ctx context.Context, arg SearchProjectsParams) ([]SearchProjectsRow, error) {
	rows, err := q.db.Query(ctx, searchProjects,
		arg.OrgID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchProjectsRow
	for rows.Next() {
		var i SearchProjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrgID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DatasetCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
update projects
set 
    name = coalesce($1, name),
    description = coalesce($2, description),
    updated_by = coalesce($3, updated_by),
    org_id = coalesce($4, org_id)
where id = $5 and org_id = $6
returning id, name, org_id, description, created_at, updated_at, created_by, updated_by
`

type UpdateProjectParams struct {
	Name        string
	Description pgtype.Text
	UpdatedBy   pgtype.Text
	OrgID       pgtype.Text
	ID          string
	OrgID_2     pgtype.Text
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.UpdatedBy,
		arg.OrgID,
		arg.ID,
		arg.OrgID_2,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
