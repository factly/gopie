// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: database_sources.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDatabaseSource = `-- name: CreateDatabaseSource :one
INSERT INTO database_sources (
    connection_string,
    sql_query,
    driver,
    org_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, connection_string, sql_query, driver, org_id, created_at, updated_at
`

type CreateDatabaseSourceParams struct {
	ConnectionString string
	SqlQuery         string
	Driver           string
	OrgID            pgtype.Text
}

func (q *Queries) CreateDatabaseSource(ctx context.Context, arg CreateDatabaseSourceParams) (DatabaseSource, error) {
	row := q.db.QueryRow(ctx, createDatabaseSource,
		arg.ConnectionString,
		arg.SqlQuery,
		arg.Driver,
		arg.OrgID,
	)
	var i DatabaseSource
	err := row.Scan(
		&i.ID,
		&i.ConnectionString,
		&i.SqlQuery,
		&i.Driver,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDatabaseSource = `-- name: DeleteDatabaseSource :exec
DELETE FROM database_sources
WHERE id = $1
`

func (q *Queries) DeleteDatabaseSource(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDatabaseSource, id)
	return err
}

const getDatabaseSource = `-- name: GetDatabaseSource :one
SELECT id, connection_string, sql_query, driver, org_id, created_at, updated_at FROM database_sources
WHERE id = $1 and org_id = $2
`

type GetDatabaseSourceParams struct {
	ID    pgtype.UUID
	OrgID pgtype.Text
}

func (q *Queries) GetDatabaseSource(ctx context.Context, arg GetDatabaseSourceParams) (DatabaseSource, error) {
	row := q.db.QueryRow(ctx, getDatabaseSource, arg.ID, arg.OrgID)
	var i DatabaseSource
	err := row.Scan(
		&i.ID,
		&i.ConnectionString,
		&i.SqlQuery,
		&i.Driver,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDatabaseSources = `-- name: ListDatabaseSources :many
SELECT id, connection_string, sql_query, driver, org_id, created_at, updated_at FROM database_sources
WHERE org_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListDatabaseSourcesParams struct {
	OrgID  pgtype.Text
	Limit  int32
	Offset int32
}

func (q *Queries) ListDatabaseSources(ctx context.Context, arg ListDatabaseSourcesParams) ([]DatabaseSource, error) {
	rows, err := q.db.Query(ctx, listDatabaseSources, arg.OrgID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatabaseSource
	for rows.Next() {
		var i DatabaseSource
		if err := rows.Scan(
			&i.ID,
			&i.ConnectionString,
			&i.SqlQuery,
			&i.Driver,
			&i.OrgID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
