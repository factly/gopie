// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dataset_summary.sql

package gen

import (
	"context"
)

const createDatasetSummary = `-- name: CreateDatasetSummary :exec
insert into dataset_summary (
    dataset_name,
    summary
) values (
    $1, $2
)
`

type CreateDatasetSummaryParams struct {
	DatasetName string
	Summary     []byte
}

func (q *Queries) CreateDatasetSummary(ctx context.Context, arg CreateDatasetSummaryParams) error {
	_, err := q.db.Exec(ctx, createDatasetSummary, arg.DatasetName, arg.Summary)
	return err
}

const deleteDatasetSummary = `-- name: DeleteDatasetSummary :exec
delete from dataset_summary 
where dataset_name = $1
`

func (q *Queries) DeleteDatasetSummary(ctx context.Context, datasetName string) error {
	_, err := q.db.Exec(ctx, deleteDatasetSummary, datasetName)
	return err
}

const getDatasetSummary = `-- name: GetDatasetSummary :one
select dataset_name, summary from dataset_summary 
where dataset_name = $1
`

func (q *Queries) GetDatasetSummary(ctx context.Context, datasetName string) (DatasetSummary, error) {
	row := q.db.QueryRow(ctx, getDatasetSummary, datasetName)
	var i DatasetSummary
	err := row.Scan(&i.DatasetName, &i.Summary)
	return i, err
}
