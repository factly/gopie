// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: projects.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
insert into projects (
    name,
    description
) values ($1, $2)
returning id, name, description, created_at, updated_at
`

type CreateProjectParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
delete from projects where id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
select 
    p.id, p.name, p.description, p.created_at, p.updated_at,
    array_remove(array_agg(pd.dataset_id), null) as dataset_ids,
    count(pd.dataset_id) as dataset_count
from projects p
left join project_datasets pd on p.id = pd.project_id
where p.id = $1
group by p.id
`

type GetProjectRow struct {
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Description  pgtype.Text        `json:"description"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
	DatasetIds   interface{}        `json:"datasetIds"`
	DatasetCount int64              `json:"datasetCount"`
}

func (q *Queries) GetProject(ctx context.Context, id string) (GetProjectRow, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i GetProjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DatasetIds,
		&i.DatasetCount,
	)
	return i, err
}

const getProjectsCount = `-- name: GetProjectsCount :one
select count(*) from projects
`

func (q *Queries) GetProjectsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getProjectsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listProjects = `-- name: ListProjects :many
select 
    p.id, p.name, p.description, p.created_at, p.updated_at,
    array_remove(array_agg(pd.dataset_id), null) as dataset_ids,
    count(pd.dataset_id) as dataset_count
from projects p
left join project_datasets pd on p.id = pd.project_id
group by p.id
order by p.created_at desc
limit $1 offset $2
`

type ListProjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListProjectsRow struct {
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Description  pgtype.Text        `json:"description"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
	DatasetIds   interface{}        `json:"datasetIds"`
	DatasetCount int64              `json:"datasetCount"`
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]ListProjectsRow, error) {
	rows, err := q.db.Query(ctx, listProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProjectsRow
	for rows.Next() {
		var i ListProjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatasetIds,
			&i.DatasetCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProjects = `-- name: SearchProjects :many
SELECT 
    p.id, p.name, p.description, p.created_at, p.updated_at,
    array_remove(array_agg(pd.dataset_id), null) as dataset_ids,
    count(pd.dataset_id) as dataset_count
FROM projects p
LEFT JOIN project_datasets pd ON p.id = pd.project_id
WHERE 
    p.name ILIKE concat('%', $1::text, '%') OR
    p.description ILIKE concat('%', $1::text, '%')
GROUP BY p.id
ORDER BY 
    CASE 
        WHEN p.name ILIKE concat($1::text, '%') THEN 1
        WHEN p.name ILIKE concat('%', $1::text, '%') THEN 2
        ELSE 3
    END,
    p.created_at DESC
LIMIT $2 OFFSET $3
`

type SearchProjectsParams struct {
	Column1 string `json:"column1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type SearchProjectsRow struct {
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Description  pgtype.Text        `json:"description"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
	DatasetIds   interface{}        `json:"datasetIds"`
	DatasetCount int64              `json:"datasetCount"`
}

func (q *Queries) SearchProjects(ctx context.Context, arg SearchProjectsParams) ([]SearchProjectsRow, error) {
	rows, err := q.db.Query(ctx, searchProjects, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchProjectsRow
	for rows.Next() {
		var i SearchProjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatasetIds,
			&i.DatasetCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
update projects
set 
    name = coalesce($1, name),
    description = coalesce($2, description)
where id = $3
returning id, name, description, created_at, updated_at
`

type UpdateProjectParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.Name, arg.Description, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
