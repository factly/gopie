// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: datasets.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDataset = `-- name: CreateDataset :one
insert into datasets (
    name,
    description,
    format,
    row_count,
    size,
    file_path,
    columns,
    alias,
    created_by,
    updated_by
) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
returning id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns
`

type CreateDatasetParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Format      string      `json:"format"`
	RowCount    pgtype.Int4 `json:"rowCount"`
	Size        pgtype.Int8 `json:"size"`
	FilePath    string      `json:"filePath"`
	Columns     []byte      `json:"columns"`
	Alias       pgtype.Text `json:"alias"`
	CreatedBy   pgtype.Text `json:"createdBy"`
	UpdatedBy   pgtype.Text `json:"updatedBy"`
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, createDataset,
		arg.Name,
		arg.Description,
		arg.Format,
		arg.RowCount,
		arg.Size,
		arg.FilePath,
		arg.Columns,
		arg.Alias,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
	)
	return i, err
}

const deleteDataset = `-- name: DeleteDataset :exec
delete from datasets where id = $1
`

func (q *Queries) DeleteDataset(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteDataset, id)
	return err
}

const getDataset = `-- name: GetDataset :one
select id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns from datasets where id = $1
`

func (q *Queries) GetDataset(ctx context.Context, id string) (Dataset, error) {
	row := q.db.QueryRow(ctx, getDataset, id)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
	)
	return i, err
}

const getDatasetByName = `-- name: GetDatasetByName :one
select id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns from datasets where name = $1
`

func (q *Queries) GetDatasetByName(ctx context.Context, name string) (Dataset, error) {
	row := q.db.QueryRow(ctx, getDatasetByName, name)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
	)
	return i, err
}

const searchDatasets = `-- name: SearchDatasets :many
select id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns from datasets
where 
    name ilike concat('%', $1, '%') or
    description ilike concat('%', $1, '%') or
    alias ilike concat('%', $1, '%')
order by 
    case 
        when alias ilike concat($1, '%') then 1
        when name ilike concat($1, '%') then 2
        when name ilike concat('%', $1, '%') then 3
        else 4
    end,
    created_at desc
limit $2 offset $3
`

type SearchDatasetsParams struct {
	Concat interface{} `json:"concat"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) SearchDatasets(ctx context.Context, arg SearchDatasetsParams) ([]Dataset, error) {
	rows, err := q.db.Query(ctx, searchDatasets, arg.Concat, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Format,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RowCount,
			&i.Alias,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Size,
			&i.FilePath,
			&i.Columns,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataset = `-- name: UpdateDataset :one
update datasets
set 
    description = coalesce($1, description),
    format = coalesce($2, format),
    row_count = coalesce($3, row_count),
    size = coalesce($4, size),
    file_path = coalesce($5, file_path),
    columns = coalesce($6, columns),
    alias = coalesce($7, alias),
    updated_by = coalesce($8, updated_by)
where id = $9
returning id, name, description, format, created_at, updated_at, row_count, alias, created_by, updated_by, size, file_path, columns
`

type UpdateDatasetParams struct {
	Description pgtype.Text `json:"description"`
	Format      string      `json:"format"`
	RowCount    pgtype.Int4 `json:"rowCount"`
	Size        pgtype.Int8 `json:"size"`
	FilePath    string      `json:"filePath"`
	Columns     []byte      `json:"columns"`
	Alias       pgtype.Text `json:"alias"`
	UpdatedBy   pgtype.Text `json:"updatedBy"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateDataset(ctx context.Context, arg UpdateDatasetParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, updateDataset,
		arg.Description,
		arg.Format,
		arg.RowCount,
		arg.Size,
		arg.FilePath,
		arg.Columns,
		arg.Alias,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RowCount,
		&i.Alias,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Size,
		&i.FilePath,
		&i.Columns,
	)
	return i, err
}
