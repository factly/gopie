// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_datasets.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDatasetToProject = `-- name: AddDatasetToProject :exec
insert into project_datasets (project_id, dataset_id)
values ($1, $2)
on conflict do nothing
`

type AddDatasetToProjectParams struct {
	ProjectID string `json:"projectId"`
	DatasetID string `json:"datasetId"`
}

func (q *Queries) AddDatasetToProject(ctx context.Context, arg AddDatasetToProjectParams) error {
	_, err := q.db.Exec(ctx, addDatasetToProject, arg.ProjectID, arg.DatasetID)
	return err
}

const batchAddDatasetsToProject = `-- name: BatchAddDatasetsToProject :exec
insert into project_datasets (project_id, dataset_id)
select $1, unnest($2::uuid[])
on conflict do nothing
`

type BatchAddDatasetsToProjectParams struct {
	ProjectID string        `json:"projectId"`
	Column2   []pgtype.UUID `json:"column2"`
}

// Batch Operations
func (q *Queries) BatchAddDatasetsToProject(ctx context.Context, arg BatchAddDatasetsToProjectParams) error {
	_, err := q.db.Exec(ctx, batchAddDatasetsToProject, arg.ProjectID, arg.Column2)
	return err
}

const batchRemoveDatasetsFromProject = `-- name: BatchRemoveDatasetsFromProject :exec
delete from project_datasets
where project_id = $1 and dataset_id = any($2::uuid[])
`

type BatchRemoveDatasetsFromProjectParams struct {
	ProjectID string        `json:"projectId"`
	Column2   []pgtype.UUID `json:"column2"`
}

func (q *Queries) BatchRemoveDatasetsFromProject(ctx context.Context, arg BatchRemoveDatasetsFromProjectParams) error {
	_, err := q.db.Exec(ctx, batchRemoveDatasetsFromProject, arg.ProjectID, arg.Column2)
	return err
}

const getDatasetProjectsCount = `-- name: GetDatasetProjectsCount :one
select count(*) 
from project_datasets
where dataset_id = $1
`

func (q *Queries) GetDatasetProjectsCount(ctx context.Context, datasetID string) (int64, error) {
	row := q.db.QueryRow(ctx, getDatasetProjectsCount, datasetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDatasetsByDateRange = `-- name: GetDatasetsByDateRange :many
select id, name, description, created_at, updated_at, row_count, columns
from datasets
where created_at between $1 and $2
order by created_at desc
limit $3 offset $4
`

type GetDatasetsByDateRangeParams struct {
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	CreatedAt_2 pgtype.Timestamptz `json:"createdAt2"`
	Limit       int32              `json:"limit"`
	Offset      int32              `json:"offset"`
}

func (q *Queries) GetDatasetsByDateRange(ctx context.Context, arg GetDatasetsByDateRangeParams) ([]Dataset, error) {
	rows, err := q.db.Query(ctx, getDatasetsByDateRange,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RowCount,
			&i.Columns,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectDatasetsCount = `-- name: GetProjectDatasetsCount :one
select count(*) 
from project_datasets
where project_id = $1
`

func (q *Queries) GetProjectDatasetsCount(ctx context.Context, projectID string) (int64, error) {
	row := q.db.QueryRow(ctx, getProjectDatasetsCount, projectID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProjectsByDateRange = `-- name: GetProjectsByDateRange :many
select 
    p.id, p.name, p.description, p.created_at, p.updated_at,
    array_remove(array_agg(pd.dataset_id), null) as dataset_ids,
    count(pd.dataset_id) as dataset_count
from projects p
left join project_datasets pd on p.id = pd.project_id
where p.created_at between $1 and $2
group by p.id
order by p.created_at desc
limit $3 offset $4
`

type GetProjectsByDateRangeParams struct {
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	CreatedAt_2 pgtype.Timestamptz `json:"createdAt2"`
	Limit       int32              `json:"limit"`
	Offset      int32              `json:"offset"`
}

type GetProjectsByDateRangeRow struct {
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Description  pgtype.Text        `json:"description"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
	DatasetIds   interface{}        `json:"datasetIds"`
	DatasetCount int64              `json:"datasetCount"`
}

func (q *Queries) GetProjectsByDateRange(ctx context.Context, arg GetProjectsByDateRangeParams) ([]GetProjectsByDateRangeRow, error) {
	rows, err := q.db.Query(ctx, getProjectsByDateRange,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectsByDateRangeRow
	for rows.Next() {
		var i GetProjectsByDateRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatasetIds,
			&i.DatasetCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDatasetProjects = `-- name: ListDatasetProjects :many
select 
    p.id, p.name, p.description, p.created_at, p.updated_at,
    pd.created_at as added_at
from projects p
join project_datasets pd on p.id = pd.project_id
where pd.dataset_id = $1
order by pd.created_at desc
limit $2 offset $3
`

type ListDatasetProjectsParams struct {
	DatasetID string `json:"datasetId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type ListDatasetProjectsRow struct {
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
	AddedAt     pgtype.Timestamptz `json:"addedAt"`
}

func (q *Queries) ListDatasetProjects(ctx context.Context, arg ListDatasetProjectsParams) ([]ListDatasetProjectsRow, error) {
	rows, err := q.db.Query(ctx, listDatasetProjects, arg.DatasetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDatasetProjectsRow
	for rows.Next() {
		var i ListDatasetProjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectDatasets = `-- name: ListProjectDatasets :many
select 
    d.id, d.name, d.description, d.created_at, d.updated_at, d.row_count, d.columns,
    pd.created_at as added_at
from datasets d
join project_datasets pd on d.id = pd.dataset_id
where pd.project_id = $1
order by pd.created_at desc
limit $2 offset $3
`

type ListProjectDatasetsParams struct {
	ProjectID string `json:"projectId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type ListProjectDatasetsRow struct {
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
	RowCount    pgtype.Int4        `json:"rowCount"`
	Columns     []byte             `json:"columns"`
	AddedAt     pgtype.Timestamptz `json:"addedAt"`
}

func (q *Queries) ListProjectDatasets(ctx context.Context, arg ListProjectDatasetsParams) ([]ListProjectDatasetsRow, error) {
	rows, err := q.db.Query(ctx, listProjectDatasets, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProjectDatasetsRow
	for rows.Next() {
		var i ListProjectDatasetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RowCount,
			&i.Columns,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDatasetFromProject = `-- name: RemoveDatasetFromProject :exec
delete from project_datasets
where project_id = $1 and dataset_id = $2
`

type RemoveDatasetFromProjectParams struct {
	ProjectID string `json:"projectId"`
	DatasetID string `json:"datasetId"`
}

func (q *Queries) RemoveDatasetFromProject(ctx context.Context, arg RemoveDatasetFromProjectParams) error {
	_, err := q.db.Exec(ctx, removeDatasetFromProject, arg.ProjectID, arg.DatasetID)
	return err
}

const searchDatasetsByColumn = `-- name: SearchDatasetsByColumn :many
select id, name, description, created_at, updated_at, row_count, columns
from datasets
where columns @> $1
order by created_at desc
limit $2 offset $3
`

type SearchDatasetsByColumnParams struct {
	Columns []byte `json:"columns"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

// Search and Filter Operations
func (q *Queries) SearchDatasetsByColumn(ctx context.Context, arg SearchDatasetsByColumnParams) ([]Dataset, error) {
	rows, err := q.db.Query(ctx, searchDatasetsByColumn, arg.Columns, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RowCount,
			&i.Columns,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
