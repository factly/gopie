services:
  postgres:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres_api:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=gopie
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - gopie

  gopie-web:
    build:
      context: ./web
      dockerfile: Dockerfile.prod
    env_file:
      - ./config-noauth.env
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - gopie

  companion:
    image: transloadit/companion:sha-e80a7f7
    ports:
      - "3020:3020"
    env_file:
      - ./config-noauth.env
    networks:
      - gopie
    depends_on:
      - minio

  gopie-migrate:
    build:
      context: ./server
      dockerfile: Dockerfile.migrate
    environment:
      - GOOSE_DBSTRING=postgres://postgres:postgres@postgres:5432/gopie?sslmode=disable
      - GOOSE_DRIVER=postgres
      - GOOSE_MIGRATION_DIR=migrations
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gopie

  gopie-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file:
      - ./config-noauth.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./volumes/duckdb:/home/gopie/dataful
    networks:
      - gopie
    user: "0:0"
    command: >
      sh -c "chown -R 1001:1001 /home/gopie/dataful && 
             chmod -R 755 /home/gopie/dataful && 
             su -s /bin/sh gopie -c 'cd /home/gopie && gopie serve'"

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9002:9002"
    volumes:
      - ./volumes/minio/data:/export
      - ./volumes/minio/config:/root/.minio
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    networks:
      - gopie
    command: server -console-address :9002 /export
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - gopie
    entrypoint: >
      /bin/sh -c "
        echo 'Minio is up. Creating the bucket!!' &&
        /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin &&
        /usr/bin/mc mb -p myminio/gopie &&
        /usr/bin/mc anonymous set public myminio/gopie/visualizations
      " 

include:
  - ./chat-server/docker-compose.yaml

networks:
  gopie:
    name: gopie-noauth
    driver: bridge
