// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DownloadStatus string

const (
	DownloadStatusPending    DownloadStatus = "pending"
	DownloadStatusProcessing DownloadStatus = "processing"
	DownloadStatusCompleted  DownloadStatus = "completed"
	DownloadStatusFailed     DownloadStatus = "failed"
	DownloadStatusExpired    DownloadStatus = "expired"
)

func (e *DownloadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DownloadStatus(s)
	case string:
		*e = DownloadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DownloadStatus: %T", src)
	}
	return nil
}

type NullDownloadStatus struct {
	DownloadStatus DownloadStatus
	Valid          bool // Valid is true if DownloadStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDownloadStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DownloadStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DownloadStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDownloadStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DownloadStatus), nil
}

type Download struct {
	ID           pgtype.UUID
	Sql          string
	DatasetID    string
	Status       DownloadStatus
	Format       string
	PreSignedUrl pgtype.Text
	ErrorMessage pgtype.Text
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	ExpiresAt    pgtype.Timestamptz
	CompletedAt  pgtype.Timestamptz
	UserID       string
	OrgID        string
}
