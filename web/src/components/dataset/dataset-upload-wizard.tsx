"use client";

import * as React from "react";
import { useState, useCallback, useRef } from "react";
import { UppyFile, Meta } from "@uppy/core";
import { toast } from "sonner";
import { ArrowLeft, AlertCircle, Database, Loader2, LinkIcon, CheckCircle2, AlertTriangle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Stepper, StepperContent, StepperActions, Step } from "@/components/ui/stepper";
import { CsvValidationUppy, FileValidationUppyRef } from "@/components/dataset/csv-validation-uppy";
import { DatabaseSourceForm } from "@/components/dataset/database-source-form";
import { UrlUploader } from "@/components/dataset/url-uploader";
import { ColumnNameEditor } from "@/components/dataset/column-name-editor";
import { useRouter } from "next/navigation";
import { useSourceDataset } from "@/lib/mutations/dataset/source-dataset";
import { useGenerateColumnDescriptions } from "@/lib/mutations/ai/generate-column-descriptions";
import { useQueryClient } from "@tanstack/react-query";
import { useColumnNameStore } from "@/lib/stores/columnNameStore";
import { useColumnDescriptionStore } from "@/lib/stores/columnDescriptionStore";
import { ValidationResult } from "@/lib/validation/validate-file";

// Step 3 Column Editor wrapper that ensures column store is populated
const Step3ColumnEditor = ({ validationResult }: { validationResult: ValidationResult }) => {
  const { setColumnMappings } = useColumnNameStore();
  
  // Ensure column store is populated when this component renders
  React.useEffect(() => {
    if (validationResult.columnNames && validationResult.columnNames.length > 0) {
      console.log('Step3ColumnEditor: Populating column store with:', validationResult.columnNames);
      setColumnMappings(validationResult.columnNames, validationResult.columnTypes);
    }
  }, [validationResult.columnNames, validationResult.columnTypes, setColumnMappings]);
  
  return <ColumnNameEditor />;
};

const WIZARD_STEPS: Step[] = [
  {
    id: "upload",
    title: "Upload Dataset",
    description: "Choose data source"
  },
  {
    id: "validate",
    title: "Validate Dataset", 
    description: "Review validation"
  },
  {
    id: "configure",
    title: "AI Readiness",
    description: "Configure columns"
  },
  {
    id: "confirm",
    title: "Confirmation",
    description: "Create dataset"
  }
];

export interface DatasetUploadWizardProps {
  projectId: string;
}

export function DatasetUploadWizard({ projectId }: DatasetUploadWizardProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [isGeneratingDescriptions, setIsGeneratingDescriptions] = useState<boolean>(false);
  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);
  const [uploadedFile, setUploadedFile] = useState<UppyFile<Meta, Record<string, never>> | null>(null);
  const [uploadResponse, setUploadResponse] = useState<unknown>(null);
  const [createdDataset, setCreatedDataset] = useState<any>(null);
  
  // Dataset creation form state
  const [datasetName, setDatasetName] = useState<string>("");
  const [datasetDescription, setDatasetDescription] = useState<string>("Uploaded from GoPie Web");
  
  // Database dialog state
  const [isDbDialogOpen, setIsDbDialogOpen] = useState(false);
  const [selectedDriver, setSelectedDriver] = useState<"postgres" | "mysql" | null>(null);
  
  // Ref for CSV validation component to trigger upload
  const csvValidationRef = useRef<FileValidationUppyRef>(null);

  const sourceDataset = useSourceDataset();
  const generateDescriptions = useGenerateColumnDescriptions();
  const queryClient = useQueryClient();
  const router = useRouter();
  
  const getColumnMappings = useColumnNameStore((state) => state.getColumnMappings);
  const getColumnDescriptions = useColumnDescriptionStore((state) => state.getColumnDescriptions);
  const setColumnDescription = useColumnDescriptionStore((state) => state.setColumnDescription);
  const resetColumnMappings = useColumnNameStore((state) => state.resetColumnMappings);
  const clearColumnDescriptions = useColumnDescriptionStore((state) => state.clearColumnDescriptions);
  const { mutateAsync: generateColumnDescriptions } = useGenerateColumnDescriptions();
  const setColumnMappings = useColumnNameStore((state) => state.setColumnMappings);
  const handleAutoGenerateDescriptions = async (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    summary: Record<string, any>,
    rows: string[][]
  ) => {
    if (!summary || !rows || rows.length === 0) {
      return;
    }

    try {
      setIsGeneratingDescriptions(true);
      toast.loading("Generating AI column descriptions...", {
        id: "generate-descriptions",
      });

      const result = await generateDescriptions.mutateAsync({
        summary,
        rows,
      });

      if (result.descriptions) {
        // Auto-populate the column description store
        Object.entries(result.descriptions).forEach(
          ([columnName, description]) => {
            setColumnDescription(columnName, description);
          }
        );

        toast.success("Column descriptions generated successfully!", {
          id: "generate-descriptions",
        });
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error
          ? error.message
          : "Failed to generate descriptions";
      toast.error(`Error generating descriptions: ${errorMessage}`, {
        id: "generate-descriptions",
      });
    } finally {
      setIsGeneratingDescriptions(false);
    }
  };

  const handleFileValidated = useCallback((file: UppyFile<Meta, Record<string, never>>, response: unknown, validation: ValidationResult) => {
    console.log('handleFileValidated called with:', { file: file?.name, validation });
    setUploadedFile(file);
    setUploadResponse(response);
    setValidationResult(validation);
    setUploadError(null);
    
    // Auto-advance to validation step
    console.log('Setting current step to 2');
    setCurrentStep(2);
    
    // Auto-generate descriptions if validation was successful
    if (validation.isValid && validation.previewData) {
      // Create a summary object from validation result
      const summary = {
        columns: validation.columnNames || [],
        rowCount: validation.previewRowCount || 0
      };
      handleAutoGenerateDescriptions(summary, validation.previewData as string[][]);
    }
  }, []);

  const handleUploadError = useCallback((error: string) => {
    setUploadError(error);
    setValidationResult(null);
    setUploadedFile(null);
    setUploadResponse(null);
  }, []);

  const handleCreateDataset = async () => {
    if (!uploadedFile || !validationResult) {
      toast.error("No file data available");
      return;
    }

    if (!csvValidationRef.current) {
      toast.error("Upload component not ready. Please try again.");
      return;
    }

    try {
      setUploadError(null);
      setIsProcessing(true);

      console.log('Starting dataset creation process...');
      console.log('Dataset name:', datasetName);
      console.log('Dataset description:', datasetDescription);
      
      // Step 1: Trigger the actual file upload to S3 first
      console.log('Triggering file upload to S3...');
      await csvValidationRef.current.triggerUpload(datasetName.trim(), datasetDescription.trim());
      
      // The upload success will be handled by the existing callback system
      // which should update the uploadResponse with the S3 URL
      // We need to wait a moment for the callback to be processed
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log('Upload completed, checking for S3 URL...');
      console.log('Current uploadResponse:', uploadResponse);
      
      // Step 2: Extract S3 URL from the upload response
      let uploadURL: string | undefined;
      if (uploadResponse && typeof uploadResponse === 'object') {
        const response = uploadResponse as any;
        uploadURL = response.uploadURL || response.url || response.body?.uploadURL || response.body?.url;
      }
      
      console.log('Extracted uploadURL:', uploadURL);
      
      if (!uploadURL) {
        throw new Error(
          'File upload completed but S3 URL not found in response. ' +
          'Please check the upload configuration and try again.'
        );
      }
      
      // Step 3: Construct S3 URL for dataset creation
      let s3Url = "";
      try {
        const url = new URL(uploadURL);
        s3Url = `s3:${url.pathname}`;
      } catch (error) {
        console.error('Error parsing upload URL:', error);
        s3Url = uploadURL;
      }
      
      console.log('Final s3Url for dataset creation:', s3Url);
      
      // Get file format from metadata or detect from filename
      const fileFormat = uploadedFile.meta.fileFormat?.toString() || "file";
      const formatDisplay =
        fileFormat === "csv"
          ? "CSV"
          : fileFormat === "parquet"
          ? "Parquet"
          : fileFormat === "json"
          ? "JSON"
          : fileFormat === "excel"
          ? "Excel"
          : fileFormat === "duckdb"
          ? "DuckDB"
          : "file";

      // Use form data for dataset name and description
      const finalDatasetName = datasetName.trim();
      const finalDatasetDescription = datasetDescription.trim() || `Uploaded from GoPie Web (${formatDisplay})`;
      const alter_column_names = getColumnMappings();
      const column_descriptions = getColumnDescriptions();

      const res = await sourceDataset.mutateAsync({
        datasetUrl: s3Url,
        projectId,
        alias: finalDatasetName,
        createdBy: "system",
        description: finalDatasetDescription,
        alter_column_names: alter_column_names,
        column_descriptions: column_descriptions,
      });

      if (!res?.data.dataset.id) {
        throw new Error("Invalid response from server: Dataset ID not found.");
      }

      setCreatedDataset({
        ...res.data.dataset,
        formatDisplay,
        columnMappings: alter_column_names,
        columnDescriptions: column_descriptions,
        validationResult
      });

      toast.success(
        `Dataset ${res.data.dataset.alias} (${formatDisplay}) created successfully`
      );
      queryClient.invalidateQueries({ queryKey: ["project", projectId] });
      queryClient.invalidateQueries({ queryKey: ["datasets", projectId] });

      // Dataset created successfully - stay in Step 4 but show success message
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error occurred";
      setUploadError(errorMessage);
      toast.error(`Failed to source dataset: ${errorMessage}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDbSourceSuccess = (datasetAlias: string, datasetId: string) => {
    toast.success(
      `Dataset ${datasetAlias} (from ${selectedDriver}) created successfully`
    );
    queryClient.invalidateQueries({ queryKey: ["project", projectId] });
    queryClient.invalidateQueries({ queryKey: ["datasets", projectId] });
    setIsDbDialogOpen(false);
    setSelectedDriver(null);
    router.push(`/projects/${projectId}/datasets/${datasetId}`);
  };

  const handleDbSourceError = (errorMessage: string) => {
    toast.error(
      `Failed to create dataset from ${
        selectedDriver || "database"
      }: ${errorMessage}`
    );
  };

  const openDbDialog = (driver: "postgres" | "mysql") => {
    setSelectedDriver(driver);
    setUploadError(null);
    setIsDbDialogOpen(true);
  };

  const handleNext = () => {
    if (currentStep < WIZARD_STEPS.length) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      setUploadError(null);
    }
  };

  const handleFinish = () => {
    // Clean up stores
    resetColumnMappings();
    clearColumnDescriptions();
    
    if (createdDataset?.id) {
      router.push(`/projects/${projectId}/datasets/${createdDataset.id}`);
    } else {
      router.push(`/projects/${projectId}`);
    }
  };

  const canProceedFromStep1 = uploadedFile && validationResult;
  const canProceedFromStep2 = validationResult;
  const canProceedFromStep3 = !isProcessing;

  // Ensure column store is populated when advancing to Step 3
  React.useEffect(() => {
    if (currentStep === 3 && validationResult?.columnNames?.length) {
      setColumnMappings(validationResult.columnNames, validationResult.columnTypes);
    }
  }, [currentStep, validationResult?.columnNames, validationResult?.columnTypes, setColumnMappings]);

  return (
    <div className="container max-w-5xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <Stepper steps={WIZARD_STEPS} currentStep={currentStep} className="mb-8" />

      <StepperContent>
        {/* Step 1: Upload Dataset */}
        {currentStep === 1 && (
          <div className="space-y-8">
            <div className="bg-card border p-6">
              {uploadError && (
                <Alert variant="destructive" className="mb-4">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>File Upload Error</AlertTitle>
                  <AlertDescription>{uploadError}</AlertDescription>
                </Alert>
              )}
              {isGeneratingDescriptions && (
                <Alert className="mb-4 bg-muted/50 border-muted-foreground/20">
                  <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
                  <AlertTitle>Generating Column Descriptions</AlertTitle>
                  <AlertDescription>
                    AI is analyzing your data to generate helpful column descriptions.
                    This may take a few moments...
                  </AlertDescription>
                </Alert>
              )}
              <CsvValidationUppy
                ref={csvValidationRef}
                projectId={projectId}
                onUploadSuccess={handleFileValidated}
                onUploadError={handleUploadError}
                onAutoGenerateDescriptions={handleAutoGenerateDescriptions}
              />
            </div>

            <div className="bg-card border p-6">
              <h2 className="text-xl font-semibold mb-1 flex items-center">
                <LinkIcon className="h-5 w-5 mr-2" /> Import from URL
              </h2>
              <p className="text-sm text-muted-foreground mb-4">
                Import a dataset directly from a publicly accessible URL. Supports CSV, JSON, and other data formats.
              </p>
              <UrlUploader
                projectId={projectId}
                onUploadSuccess={handleFileValidated}
                onUploadError={handleUploadError}
                onAutoGenerateDescriptions={handleAutoGenerateDescriptions}
              />
            </div>

            <div className="bg-card border p-6">
              <h2 className="text-xl font-semibold mb-1 flex items-center">
                <Database className="h-5 w-5 mr-2" /> Connect to Database
              </h2>
              <p className="text-sm text-muted-foreground mb-4">
                Create a dataset by connecting to your existing database or cloud storage.
              </p>
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3 sm:gap-4">
                <div 
                  onClick={() => openDbDialog("postgres")} 
                  className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]"
                >
                  <img src="/images/databases/postgres.svg" alt="PostgreSQL" className="w-full h-3/4 object-contain" />
                </div>
                <div 
                  onClick={() => openDbDialog("mysql")} 
                  className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]"
                >
                  <img src="/images/databases/mysql.svg" alt="MySQL" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/snowflake.svg" alt="Snowflake" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/google-big-query.svg" alt="BigQuery" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/amazon-redshift.svg" alt="Redshift" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/amazon-s3.svg" alt="Amazon S3" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/azure-blob-storage.svg" alt="Azure Blob" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/gcs.svg" alt="Google Cloud Storage" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/duckdb.svg" alt="DuckDB" className="w-full h-3/4 object-contain" />
                </div>
                <div className="cursor-pointer group relative flex items-center justify-center py-3 sm:py-4 px-3 border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 bg-white dark:bg-white aspect-[2/1] min-h-[60px]">
                  <div className="absolute top-1 left-1 bg-muted text-muted-foreground text-xs px-2 py-0.5 rounded-md font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-200">Coming Soon</div>
                  <img src="/images/databases/motherduck.svg" alt="MotherDuck" className="w-full h-3/4 object-contain" />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Step 2: Dataset Validation */}
        {currentStep === 2 && validationResult && (
          <div className="space-y-6">
            <div className="bg-card border p-6">
              <h2 className="text-xl font-semibold mb-4">Validation Results</h2>
              
              {/* Success Alert */}
              <Alert className="mb-4 bg-green-50 border-green-200">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <AlertTitle className="text-green-800">DuckDB {validationResult.format?.toUpperCase()} Validation Successful</AlertTitle>
                <AlertDescription className="text-green-700">
                  {validationResult.format?.toUpperCase()} file is valid with {validationResult.columnNames?.length || 0} columns:
                  <div className="mt-2 text-sm font-mono">
                    {validationResult.columnNames?.join(", ")}
                  </div>
                </AlertDescription>
              </Alert>

              {/* Data Type Warnings (if any) */}
              {validationResult.rejectedRows && validationResult.rejectedRows.length > 0 && (
                <Alert className="mb-4 bg-yellow-50 border-yellow-200">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <AlertTitle className="text-yellow-800">Data Type Validation Warnings</AlertTitle>
                  <AlertDescription className="text-yellow-700">
                    {validationResult.rejectedRows.length} row(s) contain data that doesn't match the expected types and will be excluded from the dataset:
                    <div className="mt-2 space-y-1 text-sm">
                      {validationResult.rejectedRows.slice(0, 5).map((error: any, index: number) => (
                        <div key={index} className="bg-yellow-100 p-2 rounded border border-yellow-300">
                          <div className="font-medium text-yellow-800">Row {error.rowNumber}: Column '{error.columnName}' expected a {error.expectedType} type but is empty</div>
                          <div className="text-xs text-yellow-600">Error when converting column '{error.columnName}': Could not convert string 'Uncontested' to 'DOUBLE'</div>
                        </div>
                      ))}
                      {validationResult.rejectedRows.length > 5 && (
                        <div className="text-sm text-yellow-600">
                          ... and {validationResult.rejectedRows.length - 5} more issue(s)
                        </div>
                      )}
                    </div>
                    <div className="mt-3 text-sm text-yellow-700">
                      You can proceed with the upload (rejected rows will be skipped) or fix the data and try again.
                    </div>
                  </AlertDescription>
                </Alert>
              )}

              <div className="space-y-2">
                <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                  <strong className="text-gray-900 dark:text-white">Supported formats:</strong> CSV, Parquet, JSON, Excel (.xlsx, .xls), DuckDB (.duckdb)
                </div>
                <div className="text-sm">
                  <strong>Detected format:</strong> {validationResult.format || 'CSV'}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Step 3: AI Readiness */}
        {currentStep === 3 && validationResult && (
          <div className="space-y-6">
            <div className="bg-card border p-6">
              <h2 className="text-xl font-semibold mb-4">Configure Columns for AI Readiness</h2>
              <p className="text-sm text-muted-foreground mb-4">
                Review and edit column names, data types, and descriptions to optimize your dataset for AI analysis.
              </p>
              
              {isProcessing && (
                <Alert className="mb-4 bg-primary/10 border-primary/20">
                  <Loader2 className="h-4 w-4 animate-spin text-primary" />
                  <AlertTitle>Creating Dataset</AlertTitle>
                  <AlertDescription>
                    Your dataset is being created on the server. This may take a few moments...
                  </AlertDescription>
                </Alert>
              )}

              <ColumnNameEditor />
            </div>
          </div>
        )}

        {/* Step 4: Dataset Details */}
        {currentStep === 4 && !createdDataset && (
          <div className="space-y-6">
            <div className="bg-card border p-6">
              <h2 className="text-xl font-semibold mb-4">Dataset Details</h2>
              <p className="text-sm text-muted-foreground mb-6">
                Provide a name and description for your dataset before creating it.
              </p>
              
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="dataset-name">Dataset Name *</Label>
                  <Input
                    id="dataset-name"
                    placeholder="Enter dataset name"
                    value={datasetName}
                    onChange={(e) => setDatasetName(e.target.value)}
                    className={!datasetName.trim() ? "border-red-300" : ""}
                  />
                  {!datasetName.trim() && (
                    <p className="text-sm text-red-600">Dataset name is required</p>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="dataset-description">Description</Label>
                  <Textarea
                    id="dataset-description"
                    placeholder="Enter dataset description (optional)"
                    value={datasetDescription}
                    onChange={(e) => setDatasetDescription(e.target.value)}
                    rows={3}
                  />
                  <p className="text-sm text-muted-foreground">
                    Description must be at least 10 characters
                  </p>
                </div>
              </div>
              
              {/* Dataset Summary */}
              <div className="mt-6 pt-6 border-t">
                <h3 className="text-lg font-semibold mb-4">Dataset Summary</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <div><strong>File:</strong> {uploadedFile?.name || 'N/A'}</div>
                    <div><strong>Format:</strong> {validationResult?.format?.toUpperCase() || 'N/A'}</div>
                    <div><strong>Columns:</strong> {validationResult?.columnNames?.length || 0}</div>
                  </div>
                  <div className="space-y-2">
                    <div><strong>Total Rows:</strong> {validationResult?.previewRowCount || 'N/A'}</div>
                    {validationResult?.rejectedRows && validationResult.rejectedRows.length > 0 && (
                      <div><strong>Skipped Rows:</strong> {validationResult.rejectedRows.length}</div>
                    )}
                    <div><strong>Status:</strong> <span className="text-green-600">Ready to Create</span></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Step 4: Success Message (after dataset creation) */}
        {currentStep === 4 && createdDataset && (
          <div className="space-y-6">
            <div className="bg-card border p-6">
              <div className="text-center space-y-4">
                <CheckCircle2 className="h-16 w-16 text-green-600 mx-auto" />
                <h2 className="text-2xl font-semibold text-green-800">Dataset Created Successfully!</h2>
                <p className="text-muted-foreground">
                  Your dataset has been uploaded and is ready for analysis.
                </p>
              </div>

              <div className="mt-8 space-y-4">
                <h3 className="text-lg font-semibold">Dataset Summary</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <div><strong>Name:</strong> {createdDataset.alias}</div>
                    <div><strong>Format:</strong> {createdDataset.formatDisplay}</div>
                    <div><strong>Columns:</strong> {validationResult?.columnNames?.length || 0}</div>
                  </div>
                  <div className="space-y-2">
                    <div><strong>Total Rows:</strong> {validationResult?.previewRowCount || 'N/A'}</div>
                    {validationResult?.rejectedRows && validationResult.rejectedRows.length > 0 && (
                      <div><strong>Skipped Rows:</strong> {validationResult.rejectedRows.length}</div>
                    )}
                    <div><strong>Status:</strong> <span className="text-green-600">Ready</span></div>
                  </div>
                </div>

                {validationResult?.columnNames && (
                  <div className="mt-4">
                    <h4 className="font-medium mb-2">Columns:</h4>
                    <div className="text-sm text-muted-foreground">
                      {validationResult.columnNames.join(", ")}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </StepperContent>

      <StepperActions>
        <div>
          {currentStep > 1 && currentStep < 4 && (
            <Button variant="outline" onClick={handleBack}>
              Back
            </Button>
          )}
        </div>
        <div>
          {currentStep === 1 && (
            <Button 
              onClick={handleNext} 
              disabled={!canProceedFromStep1}
            >
              Next
            </Button>
          )}
          {currentStep === 2 && (
            <Button 
              onClick={handleNext}
              disabled={!canProceedFromStep2}
            >
              Next
            </Button>
          )}
          {currentStep === 3 && (
            <Button 
              onClick={handleNext}
              disabled={!canProceedFromStep3}
            >
              Next
            </Button>
          )}
          {currentStep === 4 && !createdDataset && (
            <Button 
              onClick={handleCreateDataset}
              disabled={!datasetName.trim() || datasetDescription.length < 10 || isProcessing}
            >
              {isProcessing ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                  Creating Dataset...
                </>
              ) : (
                "Create Dataset"
              )}
            </Button>
          )}
          {currentStep === 4 && createdDataset && (
            <Button onClick={handleFinish}>
              View Dataset
            </Button>
          )}
        </div>
      </StepperActions>

      <Dialog open={isDbDialogOpen} onOpenChange={setIsDbDialogOpen}>
        <DialogContent className="sm:max-w-lg">
          {selectedDriver && (
            <DatabaseSourceForm
              projectId={projectId}
              driver={selectedDriver}
              onCloseDialog={() => {
                setIsDbDialogOpen(false);
                setSelectedDriver(null);
              }}
              onSuccess={handleDbSourceSuccess}
              onError={handleDbSourceError}
            />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
