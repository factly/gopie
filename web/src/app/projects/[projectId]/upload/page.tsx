"use client";

import * as React from "react";
import { useState } from "react";
import { UppyFile, Meta } from "@uppy/core";
import { toast } from "sonner";
import { ArrowLeft, AlertCircle, Database, Loader2, LinkIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import "@uppy/core/dist/style.css";
import "@uppy/dashboard/dist/style.css";
import { useSourceDataset } from "@/lib/mutations/dataset/source-dataset";
import { useGenerateColumnDescriptions } from "@/lib/mutations/ai/generate-column-descriptions";
import { useQueryClient } from "@tanstack/react-query";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { CsvValidationUppy } from "@/components/dataset/csv-validation-uppy";
import { useRouter } from "next/navigation";
import { useColumnNameStore } from "@/lib/stores/columnNameStore";
import { useColumnDescriptionStore } from "@/lib/stores/columnDescriptionStore";

import { Dialog, DialogContent } from "@/components/ui/dialog";
import { DatabaseSourceForm } from "@/components/dataset/database-source-form";
import { UrlUploader } from "@/components/dataset/url-uploader";

export default function UploadDatasetPage({
  params,
}: {
  params: Promise<{ projectId: string }>;
}) {
  const { projectId } = React.use(params);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [isGeneratingDescriptions, setIsGeneratingDescriptions] =
    useState<boolean>(false);
  const sourceDataset = useSourceDataset();
  const generateDescriptions = useGenerateColumnDescriptions();
  const queryClient = useQueryClient();
  const router = useRouter();
  const getColumnMappings = useColumnNameStore(
    (state) => state.getColumnMappings
  );
  const getColumnDescriptions = useColumnDescriptionStore(
    (state) => state.getColumnDescriptions
  );
  const setColumnDescription = useColumnDescriptionStore(
    (state) => state.setColumnDescription
  );

  const [isDbDialogOpen, setIsDbDialogOpen] = useState(false);
  const [selectedDriver, setSelectedDriver] = useState<
    "postgres" | "mysql" | null
  >(null);

  // Auto-generate column descriptions after file validation
  const handleAutoGenerateDescriptions = async (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    summary: Record<string, any>,
    rows: string[][]
  ) => {
    if (!summary || !rows || rows.length === 0) {
      return;
    }

    try {
      setIsGeneratingDescriptions(true);
      toast.loading("Generating AI column descriptions...", {
        id: "generate-descriptions",
      });

      const result = await generateDescriptions.mutateAsync({
        summary,
        rows,
      });

      if (result.descriptions) {
        // Auto-populate the column description store
        Object.entries(result.descriptions).forEach(
          ([columnName, description]) => {
            setColumnDescription(columnName, description);
          }
        );

        toast.success("Column descriptions generated successfully!", {
          id: "generate-descriptions",
        });
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error
          ? error.message
          : "Failed to generate descriptions";
      toast.error(`Error generating descriptions: ${errorMessage}`, {
        id: "generate-descriptions",
      });
    } finally {
      setIsGeneratingDescriptions(false);
    }
  };

  const handleUploadSuccess = async (
    file: UppyFile<Meta, Record<string, never>>,
    response: unknown
  ) => {
    if (!file) {
      toast.error("No file data available");
      setUploadError("No file data available");
      return;
    }

    try {
      setUploadError(null);
      setIsProcessing(true);

      const uploadURL = (response as { uploadURL?: string })?.uploadURL;
      const s3Url = uploadURL ? `s3:/${new URL(uploadURL).pathname}` : "";
      const datasetName =
        file.meta.datasetName?.toString() ||
        file.meta.alias?.toString() ||
        (file.name || "dataset").replace(
          /\.(csv|parquet|json|xlsx|duckdb|db|ddb)$/,
          ""
        );

      // Get file format from metadata or detect from filename
      const fileFormat = file.meta.fileFormat?.toString() || "file";
      const formatDisplay =
        fileFormat === "csv"
          ? "CSV"
          : fileFormat === "parquet"
          ? "Parquet"
          : fileFormat === "json"
          ? "JSON"
          : fileFormat === "excel"
          ? "Excel"
          : fileFormat === "duckdb"
          ? "DuckDB"
          : "file";

      const datasetDescription =
        file.meta.description?.toString() ||
        `Uploaded from GoPie Web (${formatDisplay})`;
      const alter_column_names = getColumnMappings();
      const column_descriptions = getColumnDescriptions();

      const res = await sourceDataset.mutateAsync({
        datasetUrl: s3Url,
        projectId,
        alias: datasetName,
        createdBy: "system",
        description: datasetDescription,
        alter_column_names: alter_column_names,
        column_descriptions: column_descriptions,
      });

      if (!res?.data.dataset.id) {
        throw new Error("Invalid response from server: Dataset ID not found.");
      }

      toast.success(
        `Dataset ${res.data.dataset.alias} (${formatDisplay}) uploaded successfully`
      );
      queryClient.invalidateQueries({ queryKey: ["project", projectId] });
      queryClient.invalidateQueries({ queryKey: ["datasets", projectId] });

      router.push(`/projects/${projectId}/datasets/${res.data.dataset.id}`);
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error occurred";
      setUploadError(errorMessage);
      toast.error(`Failed to source dataset: ${errorMessage}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDbSourceSuccess = (datasetAlias: string, datasetId: string) => {
    toast.success(
      `Dataset ${datasetAlias} (from ${selectedDriver}) created successfully`
    );
    queryClient.invalidateQueries({ queryKey: ["project", projectId] });
    queryClient.invalidateQueries({ queryKey: ["datasets", projectId] });
    setIsDbDialogOpen(false);
    setSelectedDriver(null);
    router.push(`/projects/${projectId}/datasets/${datasetId}`);
  };

  const handleDbSourceError = (errorMessage: string) => {
    toast.error(
      `Failed to create dataset from ${
        selectedDriver || "database"
      }: ${errorMessage}`
    );
  };

  const openDbDialog = (driver: "postgres" | "mysql") => {
    setSelectedDriver(driver);
    setUploadError(null);
    setIsDbDialogOpen(true);
  };

  return (
    <div className="container max-w-5xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <div className="mb-6">
        <Button
          variant="ghost"
          size="sm"
          className="flex items-center gap-1 mb-4"
          onClick={() => router.push(`/projects/${projectId}`)}
        >
          <ArrowLeft className="h-4 w-4" />
          Back to project
        </Button>
        <h1 className="text-2xl font-semibold">Add Dataset</h1>
        <p className="text-sm text-muted-foreground mt-1">
          Upload a data file or connect to a database to create a new dataset.
        </p>
      </div>

      <div className="bg-card border p-6 mb-8">
        <h2 className="text-xl font-semibold mb-1">Upload Data File</h2>
        <p className="text-sm text-muted-foreground mb-4">
          Drag & drop a file or click to browse. Supports CSV, Parquet, JSON,
          Excel (.xlsx, .xls), and DuckDB files. Excel files are automatically converted to CSV.
        </p>
        {uploadError && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>File Upload Error</AlertTitle>
            <AlertDescription>{uploadError}</AlertDescription>
          </Alert>
        )}
        {isProcessing && (
          <Alert className="mb-4 bg-primary/10 border-primary/20">
            <Loader2 className="h-4 w-4 animate-spin text-primary" />
            <AlertTitle>Processing Dataset</AlertTitle>
            <AlertDescription>
              Your file has been uploaded and is being processed by the server.
              This may take a few moments...
            </AlertDescription>
          </Alert>
        )}
        {isGeneratingDescriptions && (
          <Alert className="mb-4 bg-muted/50 border-muted-foreground/20">
            <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
            <AlertTitle>Generating Column Descriptions</AlertTitle>
            <AlertDescription>
              AI is analyzing your data to generate helpful column descriptions.
              This may take a few moments...
            </AlertDescription>
          </Alert>
        )}
        <CsvValidationUppy
          projectId={projectId}
          onUploadSuccess={handleUploadSuccess}
          onAutoGenerateDescriptions={handleAutoGenerateDescriptions}
        />
      </div>

      <div className="bg-card border p-6 mb-8">
        <h2 className="text-xl font-semibold mb-1 flex items-center">
          <LinkIcon className="h-5 w-5 mr-2" /> Import from URL
        </h2>
        <p className="text-sm text-muted-foreground mb-4">
          Import a dataset directly from a publicly accessible URL. Supports CSV, JSON, and other data formats.
        </p>
        <UrlUploader
          projectId={projectId}
          onUploadSuccess={handleUploadSuccess}
          onAutoGenerateDescriptions={handleAutoGenerateDescriptions}
        />
      </div>

      <div className="bg-card border p-6">
        <h2 className="text-xl font-semibold mb-1 flex items-center">
          <Database className="h-5 w-5 mr-2" /> Connect to Database
        </h2>
        <p className="text-sm text-muted-foreground mb-4">
          Create a dataset by querying your existing PostgreSQL or MySQL
          database.
        </p>
        <div className="flex gap-4">
          <Button onClick={() => openDbDialog("postgres")} variant="outline">
            Connect to PostgreSQL
          </Button>
          <Button onClick={() => openDbDialog("mysql")} variant="outline">
            Connect to MySQL
          </Button>
        </div>
      </div>

      <Dialog open={isDbDialogOpen} onOpenChange={setIsDbDialogOpen}>
        <DialogContent className="sm:max-w-lg">
          {selectedDriver && (
            <DatabaseSourceForm
              projectId={projectId}
              driver={selectedDriver}
              onCloseDialog={() => {
                setIsDbDialogOpen(false);
                setSelectedDriver(null);
              }}
              onSuccess={handleDbSourceSuccess}
              onError={handleDbSourceError}
            />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
