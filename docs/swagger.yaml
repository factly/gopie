basePath: /
definitions:
  api.nl2SqlRequest:
    description: Request body for converting natural language to SQL
    properties:
      query:
        description: Natural language query to convert to SQL
        example: show me total sales by region
        minLength: 3
        type: string
      table:
        description: Name of the dataset/table to query
        example: sales_data
        type: string
    required:
    - query
    - table
    type: object
  api.sqlRequestBody:
    description: Request body for executing a SQL query
    properties:
      query:
        description: SQL query to execute (only SELECT statements are allowed)
        example: SELECT * FROM sales_data WHERE value > 1000
        minLength: 1
        type: string
    required:
    - query
    type: object
  chats.chatRequestBody:
    description: Request body for creating or continuing a chat conversation
    properties:
      chat_id:
        description: Unique identifier of an existing chat (optional for new chats)
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      created_by:
        description: User ID of the creator
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      dataset_id:
        description: ID of the dataset to analyze
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      messages:
        description: Array of chat messages
        items:
          properties:
            content:
              description: Message content
              example: Show me the total sales by region
              type: string
            role:
              description: Message role (user/assistant)
              example: user
              type: string
          required:
          - content
          - role
          type: object
        type: array
    required:
    - messages
    type: object
  chats.chatWithAgentRequeryBody:
    description: Request body for creating a streaming chat conversation with an AI
      agent
    properties:
      dataset_ids:
        description: Array of dataset IDs to analyze
        example:
        - '[''550e8400-e29b-41d4-a716-446655440000'']'
        items:
          type: string
        type: array
      project_ids:
        description: Array of project IDs to analyze
        example:
        - '[''550e8400-e29b-41d4-a716-446655440000'']'
        items:
          type: string
        type: array
      user_input:
        description: User input/question for the AI agent
        example: What are the trends in this dataset?
        type: string
    required:
    - user_input
    type: object
  database.createRequestBody:
    description: Request body for creating a database source dataset
    properties:
      alias:
        description: Alias of the dataset
        example: users_data
        minLength: 3
        type: string
      connection_string:
        description: Connection string for the Postgres database
        example: postgres://username:password@localhost:5432/database
        type: string
      created_by:
        description: User ID of the creator
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      description:
        description: Description of the dataset
        example: User data from our production database
        maxLength: 500
        minLength: 10
        type: string
      driver:
        description: Driver of the database
        enum:
        - postgres
        - mysql
        example: postgres
        type: string
      project_id:
        description: ID of the project to add the dataset to
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      sql_query:
        description: SQL query to execute
        example: SELECT * FROM users
        type: string
    required:
    - alias
    - connection_string
    - created_by
    - driver
    - project_id
    - sql_query
    type: object
  datasets.updateDatasetParams:
    properties:
      alias:
        type: string
      description:
        type: string
      updated_by:
        type: string
    required:
    - updated_by
    type: object
  models.Chat:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.ChatMessage:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      role:
        type: string
    type: object
  models.ChatWithMessages:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      messages:
        items:
          $ref: '#/definitions/models.ChatMessage'
        type: array
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Dataset:
    description: Dataset model
    properties:
      alias:
        description: Alias of the dataset
        example: sales_data_alias
        type: string
      columns:
        description: Column definitions of the dataset
        items:
          additionalProperties: {}
          type: object
        type: array
      created_at:
        description: Creation timestamp
        example: "2024-02-05T12:00:00Z"
        type: string
      created_by:
        description: CreatedBy represents the user who created the dataset
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      description:
        description: Description of the dataset
        example: Sales data for Q1 2024
        type: string
      file_path:
        description: File path of the dataset
        example: /data/sales_data.csv
        type: string
      format:
        description: Format of the dataset (e.g., csv, parquet)
        example: csv
        type: string
      id:
        description: Unique identifier of the dataset
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        description: Name of the dataset
        example: gp_Dh790Asdf17kd
        type: string
      row_count:
        description: Number of rows in the dataset
        example: 1000
        type: integer
      size:
        description: Size of the dataset in bytes
        example: 1048576
        type: integer
      updated_at:
        description: Last update timestamp
        example: "2024-02-05T12:00:00Z"
        type: string
      updated_by:
        description: UpdatedBy represents the user who last updated the dataset
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.Project:
    description: Project model
    properties:
      created_by:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      createdAt:
        description: Creation timestamp
        example: "2024-02-05T12:00:00Z"
        type: string
      description:
        description: Description of the project
        example: This is a sample project description
        type: string
      id:
        description: Unique identifier of the project
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        description: Name of the project
        example: My Project
        type: string
      updated_by:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      updatedAt:
        description: Last update timestamp
        example: "2024-02-05T12:00:00Z"
        type: string
    type: object
  projects.createRequestBody:
    description: Request body for creating a new project
    properties:
      created_by:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      description:
        description: Description of the project
        example: This is a detailed description of my new project
        maxLength: 500
        minLength: 10
        type: string
      name:
        description: Name of the project
        example: My New Project
        maxLength: 50
        minLength: 3
        type: string
    required:
    - created_by
    - description
    - name
    type: object
  projects.updateProjectBody:
    description: Request body for updating an existing project
    properties:
      description:
        description: Description of the project
        example: Updated project description
        maxLength: 500
        type: string
      name:
        description: Name of the project
        example: Updated Project Name
        maxLength: 50
        minLength: 3
        type: string
      updated_by:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - name
    - updated_by
    type: object
  responses.ErrorResponse:
    description: Error response structure
    properties:
      code:
        description: Error code
        example: 400
        type: integer
      error:
        description: Error details
        example: Validation failed
        type: string
      message:
        description: Error message
        example: Invalid request parameters
        type: string
    type: object
  responses.SuccessResponse:
    description: Success response structure with data
    properties:
      data:
        description: Response data
    type: object
  s3.updateRequestBody:
    description: Request body for updating a dataset from S3
    properties:
      alter_column_names:
        additionalProperties:
          type: string
        description: Column names to be altered (optional)
        type: object
      dataset:
        description: Name of the dataset to update
        example: sales_data_table
        type: string
      description:
        description: Updated description of the dataset (optional)
        example: Updated sales data for Q1 2024
        maxLength: 500
        minLength: 10
        type: string
      file_path:
        description: S3 path of the new file (optional)
        example: my-bucket/data/updated_sales.csv
        minLength: 1
        type: string
      updated_by:
        description: User ID of the updater
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - alter_column_names
    - dataset
    - updated_by
    type: object
  s3.uploadRequestBody:
    description: Request body for uploading a file from S3
    properties:
      alias:
        description: Alias of the dataset
        example: sales_data
        minLength: 3
        type: string
      alter_column_names:
        additionalProperties:
          type: string
        description: Column names to be altered
        type: object
      created_by:
        description: User ID of the creator
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      description:
        description: Description of the dataset
        example: Sales data for Q1 2024
        maxLength: 500
        minLength: 10
        type: string
      file_path:
        description: S3 path of the file to upload
        example: my-bucket/data/sales.csv
        minLength: 1
        type: string
      project_id:
        description: ID of the project to add the dataset to
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - alias
    - alter_column_names
    - created_by
    - file_path
    - project_id
    type: object
host: localhost:8000
info:
  contact: {}
  description: GoPie API documentation
  title: GoPie API
  version: "1.0"
paths:
  /source/database/upload:
    post:
      consumes:
      - application/json
      description: Create a new dataset from a Postgres database query
      parameters:
      - description: Create request parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/database.createRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Dataset'
              type: object
        "400":
          description: Invalid request body or database connection error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create dataset from Postgres
      tags:
      - database
  /source/s3/update:
    post:
      consumes:
      - application/json
      description: Update an existing dataset with a new file from S3
      parameters:
      - description: Update request parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/s3.updateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Dataset'
              type: object
        "400":
          description: Invalid request body or S3 file access error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update dataset from S3
      tags:
      - s3
  /source/s3/upload:
    post:
      consumes:
      - application/json
      description: Upload a file from S3 and create a new dataset
      parameters:
      - description: Upload request parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/s3.uploadRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Dataset'
              type: object
        "400":
          description: Invalid request body or S3 file access error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Upload file from S3
      tags:
      - s3
  /v1/api/chats:
    get:
      consumes:
      - application/json
      description: Get all chats associated with a specific dataset with pagination
      parameters:
      - description: Dataset ID
        in: query
        name: dataset_id
        required: true
        type: string
      - default: 10
        description: Number of chats per page
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dataset chats retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Chat'
                  type: array
              type: object
        "400":
          description: Dataset ID is required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: List dataset chats
      tags:
      - chats
    post:
      consumes:
      - application/json
      description: Create a new chat or continue an existing chat conversation with
        AI about a dataset
      parameters:
      - description: Chat request parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/chats.chatRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Chat created/continued successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ChatWithMessages'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create or continue chat
      tags:
      - chats
  /v1/api/chats/{chatID}:
    delete:
      consumes:
      - application/json
      description: Delete an entire chat and all its messages
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Chat deleted successfully
        "404":
          description: Chat not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete chat
      tags:
      - chats
  /v1/api/chats/{chatID}/messages:
    get:
      consumes:
      - application/json
      description: Get all messages from a specific chat with pagination
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: string
      - default: 10
        description: Number of messages per page
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chat messages retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ChatMessage'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get chat messages
      tags:
      - chats
  /v1/api/chats/{chatID}/messages/{messageID}:
    delete:
      consumes:
      - application/json
      description: Delete a specific message from a chat
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: string
      - description: Message ID
        in: path
        name: messageID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Message deleted successfully
        "404":
          description: Message not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete chat message
      tags:
      - chats
  /v1/api/chats/agent:
    post:
      consumes:
      - application/json
      description: Create a streaming chat conversation with an AI agent about datasets
        or projects
      parameters:
      - description: Chat request parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/chats.chatWithAgentRequeryBody'
      produces:
      - text/event-stream
      responses:
        "200":
          description: Server-sent events stream started
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Chat with AI agent
      tags:
      - chats
  /v1/api/nl2sql:
    post:
      consumes:
      - application/json
      description: Convert a natural language query to SQL for a specific dataset
      parameters:
      - description: Natural language query request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.nl2SqlRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Generated SQL query
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or could not generate SQL
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Table not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Convert natural language to SQL
      tags:
      - query
  /v1/api/projects:
    get:
      consumes:
      - application/json
      description: Get all projects with pagination and search
      parameters:
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - description: Search query
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: No projects found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: List all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project with the given name and description
      parameters:
      - description: Project object
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/projects.createRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Project'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new project
      tags:
      - projects
  /v1/api/projects/{projectID}:
    delete:
      consumes:
      - application/json
      description: Delete an existing project
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete a project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get details of a specific project
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get project details
      tags:
      - projects
    patch:
      consumes:
      - application/json
      description: Update an existing project's name and/or description
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Project object
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/projects.updateProjectBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Project'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update a project
      tags:
      - projects
  /v1/api/projects/{projectID}/datasets:
    get:
      consumes:
      - application/json
      description: Get all datasets in a project with pagination
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Dataset'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: List project datasets
      tags:
      - datasets
  /v1/api/projects/{projectID}/datasets/{datasetID}:
    delete:
      consumes:
      - application/json
      description: Delete a dataset from a project
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Dataset ID
        in: path
        name: datasetID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete dataset
      tags:
      - datasets
    get:
      consumes:
      - application/json
      description: Get details of a specific dataset in a project
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Dataset ID
        in: path
        name: datasetID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dataset'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get dataset details
      tags:
      - datasets
    put:
      consumes:
      - application/json
      description: Update an existing dataset information
      operationId: update-dataset
      parameters:
      - description: Dataset ID
        in: path
        name: datasetID
        required: true
        type: string
      - description: Dataset update parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/datasets.updateDatasetParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Dataset'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update dataset
      tags:
      - datasets
  /v1/api/schemas/{tableName}:
    get:
      consumes:
      - application/json
      description: Get the schemas information for a dataset/table
      parameters:
      - description: Name of the dataset/table
        in: path
        name: tableName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Schema information
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid table name
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get table schemas
      tags:
      - query
  /v1/api/sql:
    post:
      consumes:
      - application/json
      description: Execute a SQL query on a dataset (only SELECT statements are allowed)
      parameters:
      - description: SQL query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/api.sqlRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Query results
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Invalid SQL query
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Non-SELECT statement
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Table not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Execute SQL query
      tags:
      - query
  /v1/api/tables/{tableName}:
    get:
      consumes:
      - application/json
      description: Query a dataset using REST-style parameters
      parameters:
      - description: Name of the dataset/table
        in: path
        name: tableName
        required: true
        type: string
      - description: Comma-separated list of columns to return
        in: query
        name: columns
        type: string
      - description: Sort order (column name with optional -prefix for desc)
        in: query
        name: sort
        type: string
      - description: Number of records to return
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Query results
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Query dataset using REST API
      tags:
      - query
swagger: "2.0"
